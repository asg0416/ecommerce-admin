// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// model : DB의 테이블을 정의
// Store : DB 테이블을 나타내는 모델명
// 각 속성 : 각 컬럼
// @ ~ : 프리즈마 고유 속성으로 해당 컬럼의 특성 정의
// @id : primary key
// @default : 자동 생성 컬럼의 기본값 설정 속성
// @updatedAt : 자동으로 업데이트 시간을 갱신

// 아래 Store 테이블 속성 중 실제로 값이 필요한 컬럼은 name, userId 뿐.
// userId 는 clerk auth 속성값으로 가져오고
// name 은 생성할 스토어명으로 input 값으로 받아옴.
model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
}

// Billboard 모델은 storeId라는 foreign key를 가지며, 'store' 관계를 통해 'Store' 테이블과 연결되어있음
// @relation 속성으로 세부 관계 지정, 'fields'로 현재 테이블의 외래 키 컬럼 설정, 'references'로 연결되는 테이블의 기본 키 컬럼 설정
model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt()

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  storeId   String
  store     Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([storeId])
}
